{"ast":null,"code":"\"use client\";import{createContext,useState,useEffect,useContext}from\"react\";import{onAuthStateChanged}from\"firebase/auth\";import AsyncStorage from\"@react-native-async-storage/async-storage\";import{auth}from\"../config/firebase\";import FirebaseService from\"../services/FirebaseService\";import{reset,navigate}from\"../utils/navigationRef\";import{isDevelopment}from\"../utils/env\";import Platform from\"react-native-web/dist/exports/Platform\";import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=createContext(undefined);const USER_STORAGE_KEY=\"yovibe_user_data\";const safeNavigate=routeConfig=>{try{if(false||typeof reset==='function'){reset(routeConfig);}else{console.log('Navigation not available on web or not initialized');}}catch(navError){console.warn(\"Navigation error:\",navError);if(typeof navigate==='function'&&false){try{navigate(routeConfig.routes[0].name);}catch(fallbackError){console.error(\"Fallback navigation failed:\",fallbackError);}}}};export const AuthProvider=({children})=>{const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);const[authInitialized,setAuthInitialized]=useState(false);useEffect(()=>{const loadStoredUser=async()=>{try{const storedUser=await AsyncStorage.getItem(USER_STORAGE_KEY);if(storedUser){setUser(JSON.parse(storedUser));}}catch(error){console.error(\"Error loading stored user:\",error);}finally{setLoading(false);}};loadStoredUser();},[]);useEffect(()=>{console.log(\"Setting up auth state listener\");let unsubscribe;try{unsubscribe=onAuthStateChanged(auth,async firebaseUser=>{setLoading(true);console.log(\"Auth state changed:\",firebaseUser?firebaseUser.email:\"No user\");setAuthInitialized(true);if(firebaseUser){try{let userProfile;try{userProfile=await FirebaseService.getUserProfile(firebaseUser.uid);}catch(error){console.warn(\"Error fetching user profile, using mock data:\",error);userProfile={id:\"mock-id\",uid:firebaseUser.uid,email:firebaseUser.email||\"test@example.com\",userType:\"user\",createdAt:new Date(),lastLoginAt:new Date()};}setUser(userProfile);console.log(\"User profile loaded:\",userProfile.email);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(userProfile));}catch(error){console.error(\"Error in auth state change handler:\",error);setUser(null);await AsyncStorage.removeItem(USER_STORAGE_KEY);}}else{console.log(\"No user found, clearing user state\");setUser(null);await AsyncStorage.removeItem(USER_STORAGE_KEY);}setLoading(false);});}catch(error){console.error(\"Error setting up auth state listener:\",error);setLoading(false);setAuthInitialized(true);if(true){console.log(\"Web platform: Creating mock user for display purposes\");const mockUser={id:\"web-mock-id\",uid:\"web-mock-uid\",email:\"web-user@example.com\",userType:\"user\",createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);}}return()=>{console.log(\"Cleaning up auth state listener\");if(unsubscribe){unsubscribe();}};},[]);useEffect(()=>{if(true&&authInitialized&&!user&&!loading){console.log(\"Web platform: No authenticated user, creating mock user for display\");const mockUser={id:\"web-guest-id\",uid:\"web-guest-uid\",email:\"guest@example.com\",userType:\"user\",createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);}},[authInitialized,user,loading]);const signIn=async(email,password)=>{console.log(\"Attempting to sign in:\",email);setLoading(true);try{await FirebaseService.signIn(email,password);console.log(\"Sign in successful\");if(isDevelopment()){console.log(\"Development mode: Creating mock user\");const mockUser={id:\"mock-id\",uid:\"mock-uid\",email:email,userType:\"user\",createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(mockUser));}if(false){safeNavigate({index:0,routes:[{name:\"Main\"}]});}}catch(error){console.error(\"Error signing in:\",error);if(isDevelopment()){console.log(\"Development mode: Creating mock user\");const mockUser={id:\"mock-id\",uid:\"mock-uid\",email:email,userType:\"user\",createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(mockUser));}else{throw error;}}finally{setLoading(false);}};const signUp=async(email,password,userType)=>{console.log(\"Attempting to sign up:\",email,\"as\",userType);setLoading(true);try{await FirebaseService.signUp(email,password,userType);console.log(\"Sign up successful\");if(isDevelopment()){console.log(\"Development mode: Creating mock user\");const mockUser={id:\"mock-id\",uid:\"mock-uid\",email:email,userType:userType,createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(mockUser));}if(false){safeNavigate({index:0,routes:[{name:\"Main\"}]});}}catch(error){console.error(\"Error signing up:\",error);if(isDevelopment()){console.log(\"Development mode: Creating mock user\");const mockUser={id:\"mock-id\",uid:\"mock-uid\",email:email,userType:userType,createdAt:new Date(),lastLoginAt:new Date()};setUser(mockUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(mockUser));}else{throw error;}}finally{setLoading(false);}};const signOut=async()=>{console.log(\"Attempting to sign out\");setLoading(true);try{await FirebaseService.signOut();await AsyncStorage.removeItem(USER_STORAGE_KEY);setUser(null);console.log(\"Sign out successful\");if(false){safeNavigate({index:0,routes:[{name:\"Auth\"}]});}}catch(error){console.error(\"Error signing out:\",error);await AsyncStorage.removeItem(USER_STORAGE_KEY);setUser(null);if(false){safeNavigate({index:0,routes:[{name:\"Auth\"}]});}}finally{setLoading(false);}};const updateProfile=async data=>{if(!user){throw new Error(\"No user logged in\");}console.log(\"Updating user profile:\",data);setLoading(true);try{await FirebaseService.updateUserProfile(user.id,data);const updatedUser=Object.assign({},user,data);setUser(updatedUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(updatedUser));console.log(\"Profile update successful\");}catch(error){console.error(\"Error updating profile:\",error);if(isDevelopment()){const updatedUser=Object.assign({},user,data);setUser(updatedUser);await AsyncStorage.setItem(USER_STORAGE_KEY,JSON.stringify(updatedUser));}else{throw error;}}finally{setLoading(false);}};return _jsx(AuthContext.Provider,{value:{user,loading,signIn,signUp,signOut,updateProfile},children:children});};export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error(\"useAuth must be used within an AuthProvider\");}return context;};","map":{"version":3,"names":["createContext","useState","useEffect","useContext","onAuthStateChanged","AsyncStorage","auth","FirebaseService","reset","navigate","isDevelopment","Platform","jsx","_jsx","AuthContext","undefined","USER_STORAGE_KEY","safeNavigate","routeConfig","console","log","navError","warn","routes","name","fallbackError","error","AuthProvider","children","user","setUser","loading","setLoading","authInitialized","setAuthInitialized","loadStoredUser","storedUser","getItem","JSON","parse","unsubscribe","firebaseUser","email","userProfile","getUserProfile","uid","id","userType","createdAt","Date","lastLoginAt","setItem","stringify","removeItem","mockUser","signIn","password","index","signUp","signOut","updateProfile","data","Error","updateUserProfile","updatedUser","Object","assign","Provider","value","useAuth","context"],"sources":["C:/Users/user/Desktop/projects/life/Yo/yovibe-web/src/contexts/AuthContext.tsx"],"sourcesContent":["\"use client\"\n\nimport type React from \"react\"\nimport { createContext, useState, useEffect, useContext } from \"react\"\nimport { onAuthStateChanged } from \"firebase/auth\"\nimport AsyncStorage from \"@react-native-async-storage/async-storage\"\nimport { auth } from \"../config/firebase\"\nimport FirebaseService from \"../services/FirebaseService\"\nimport type { User, UserType } from \"../models/User\"\nimport { reset, navigate } from \"../utils/navigationRef\"\nimport { isDevelopment } from \"../utils/env\"\nimport { Platform } from \"react-native\"\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<void>\n  signUp: (email: string, password: string, userType: UserType) => Promise<void>\n  signOut: () => Promise<void>\n  updateProfile: (data: Partial<User>) => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined)\n\n// Key for storing user data in AsyncStorage\nconst USER_STORAGE_KEY = \"yovibe_user_data\"\n\n// Helper function to safely navigate\nconst safeNavigate = (routeConfig: any) => {\n  try {\n    // Only attempt navigation on non-web platforms or if navigation is available\n    if (Platform.OS !== 'web' || (typeof reset === 'function')) {\n      reset(routeConfig)\n    } else {\n      console.log('Navigation not available on web or not initialized')\n    }\n  } catch (navError) {\n    console.warn(\"Navigation error:\", navError)\n    // Try fallback navigation if available\n    if (typeof navigate === 'function' && Platform.OS !== 'web') {\n      try {\n        navigate(routeConfig.routes[0].name)\n      } catch (fallbackError) {\n        console.error(\"Fallback navigation failed:\", fallbackError)\n      }\n    }\n  }\n}\n\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n  const [authInitialized, setAuthInitialized] = useState(false)\n\n  // Load user from AsyncStorage on initial load\n  useEffect(() => {\n    const loadStoredUser = async () => {\n      try {\n        const storedUser = await AsyncStorage.getItem(USER_STORAGE_KEY)\n        if (storedUser) {\n          setUser(JSON.parse(storedUser))\n        }\n      } catch (error) {\n        console.error(\"Error loading stored user:\", error)\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    loadStoredUser()\n  }, [])\n\n  useEffect(() => {\n    console.log(\"Setting up auth state listener\")\n    let unsubscribe: () => void;\n    \n    try {\n      unsubscribe = onAuthStateChanged(auth, async (firebaseUser) => {\n        setLoading(true)\n        console.log(\"Auth state changed:\", firebaseUser ? firebaseUser.email : \"No user\")\n        setAuthInitialized(true)\n\n        if (firebaseUser) {\n          try {\n            // For development/testing, create a mock user if Firebase is not properly configured\n            let userProfile\n            try {\n              userProfile = await FirebaseService.getUserProfile(firebaseUser.uid)\n            } catch (error) {\n              console.warn(\"Error fetching user profile, using mock data:\", error)\n              // Create a mock user for development\n              userProfile = {\n                id: \"mock-id\",\n                uid: firebaseUser.uid,\n                email: firebaseUser.email || \"test@example.com\",\n                userType: \"user\" as UserType,\n                createdAt: new Date(),\n                lastLoginAt: new Date(),\n              }\n            }\n\n            setUser(userProfile)\n            console.log(\"User profile loaded:\", userProfile.email)\n\n            // Store user data in AsyncStorage\n            await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(userProfile))\n          } catch (error) {\n            console.error(\"Error in auth state change handler:\", error)\n            setUser(null)\n            await AsyncStorage.removeItem(USER_STORAGE_KEY)\n          }\n        } else {\n          console.log(\"No user found, clearing user state\")\n          setUser(null)\n          await AsyncStorage.removeItem(USER_STORAGE_KEY)\n        }\n\n        setLoading(false)\n      });\n    } catch (error) {\n      console.error(\"Error setting up auth state listener:\", error)\n      setLoading(false)\n      setAuthInitialized(true)\n      \n      // For web platform, create a mock user to prevent black screen\n      if (Platform.OS === 'web') {\n        console.log(\"Web platform: Creating mock user for display purposes\")\n        const mockUser = {\n          id: \"web-mock-id\",\n          uid: \"web-mock-uid\",\n          email: \"web-user@example.com\",\n          userType: \"user\" as UserType,\n          createdAt: new Date(),\n          lastLoginAt: new Date(),\n        }\n        setUser(mockUser)\n      }\n    }\n\n    return () => {\n      console.log(\"Cleaning up auth state listener\")\n      if (unsubscribe) {\n        unsubscribe()\n      }\n    }\n  }, [])\n\n  // Special handling for web platform to prevent black screen\n  useEffect(() => {\n    if (Platform.OS === 'web' && authInitialized && !user && !loading) {\n      console.log(\"Web platform: No authenticated user, creating mock user for display\")\n      const mockUser = {\n        id: \"web-guest-id\",\n        uid: \"web-guest-uid\",\n        email: \"guest@example.com\",\n        userType: \"user\" as UserType,\n        createdAt: new Date(),\n        lastLoginAt: new Date(),\n      }\n      setUser(mockUser)\n    }\n  }, [authInitialized, user, loading])\n\n  const signIn = async (email: string, password: string) => {\n    console.log(\"Attempting to sign in:\", email)\n    setLoading(true)\n    try {\n      await FirebaseService.signIn(email, password)\n      console.log(\"Sign in successful\")\n      // The onAuthStateChanged listener will update the user state\n\n      // For development/testing, create a mock user if Firebase is not properly configured\n      if (isDevelopment()) {\n        console.log(\"Development mode: Creating mock user\")\n        const mockUser = {\n          id: \"mock-id\",\n          uid: \"mock-uid\",\n          email: email,\n          userType: \"user\" as UserType,\n          createdAt: new Date(),\n          lastLoginAt: new Date(),\n        }\n        setUser(mockUser)\n        await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(mockUser))\n      }\n\n      // Navigate to main app after successful login\n      if (Platform.OS !== 'web') {\n        safeNavigate({\n          index: 0,\n          routes: [{ name: \"Main\" }],\n        })\n      }\n    } catch (error) {\n      console.error(\"Error signing in:\", error)\n\n      // For development/testing, create a mock user if Firebase is not properly configured\n      if (isDevelopment()) {\n        console.log(\"Development mode: Creating mock user\")\n        const mockUser = {\n          id: \"mock-id\",\n          uid: \"mock-uid\",\n          email: email,\n          userType: \"user\" as UserType,\n          createdAt: new Date(),\n          lastLoginAt: new Date(),\n        }\n        setUser(mockUser)\n        await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(mockUser))\n      } else {\n        throw error\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signUp = async (email: string, password: string, userType: UserType) => {\n    console.log(\"Attempting to sign up:\", email, \"as\", userType)\n    setLoading(true)\n    try {\n      await FirebaseService.signUp(email, password, userType)\n      console.log(\"Sign up successful\")\n      // The onAuthStateChanged listener will update the user state\n\n      // For development/testing, create a mock user if Firebase is not properly configured\n      if (isDevelopment()) {\n        console.log(\"Development mode: Creating mock user\")\n        const mockUser = {\n          id: \"mock-id\",\n          uid: \"mock-uid\",\n          email: email,\n          userType: userType,\n          createdAt: new Date(),\n          lastLoginAt: new Date(),\n        }\n        setUser(mockUser)\n        await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(mockUser))\n      }\n\n      // Navigate to main app after successful signup\n      if (Platform.OS !== 'web') {\n        safeNavigate({\n          index: 0,\n          routes: [{ name: \"Main\" }],\n        })\n      }\n    } catch (error) {\n      console.error(\"Error signing up:\", error)\n\n      // For development/testing, create a mock user if Firebase is not properly configured\n      if (isDevelopment()) {\n        console.log(\"Development mode: Creating mock user\")\n        const mockUser = {\n          id: \"mock-id\",\n          uid: \"mock-uid\",\n          email: email,\n          userType: userType,\n          createdAt: new Date(),\n          lastLoginAt: new Date(),\n        }\n        setUser(mockUser)\n        await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(mockUser))\n      } else {\n        throw error\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const signOut = async () => {\n    console.log(\"Attempting to sign out\")\n    setLoading(true)\n    try {\n      await FirebaseService.signOut()\n      // Clear stored user data\n      await AsyncStorage.removeItem(USER_STORAGE_KEY)\n      setUser(null)\n      console.log(\"Sign out successful\")\n\n      // Navigate to Auth/Login screen after sign out\n      if (Platform.OS !== 'web') {\n        safeNavigate({\n          index: 0,\n          routes: [{ name: \"Auth\" }],\n        })\n      }\n    } catch (error) {\n      console.error(\"Error signing out:\", error)\n\n      // For development/testing, clear user state even if Firebase fails\n      await AsyncStorage.removeItem(USER_STORAGE_KEY)\n      setUser(null)\n\n      // Still navigate to Auth screen even if there was an error\n      if (Platform.OS !== 'web') {\n        safeNavigate({\n          index: 0,\n          routes: [{ name: \"Auth\" }],\n        })\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  const updateProfile = async (data: Partial<User>) => {\n    if (!user) {\n      throw new Error(\"No user logged in\")\n    }\n\n    console.log(\"Updating user profile:\", data)\n    setLoading(true)\n    try {\n      await FirebaseService.updateUserProfile(user.id, data)\n\n      // Update local user state\n      const updatedUser = { ...user, ...data }\n      setUser(updatedUser)\n\n      // Update stored user data\n      await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(updatedUser))\n      console.log(\"Profile update successful\")\n    } catch (error) {\n      console.error(\"Error updating profile:\", error)\n\n      // For development/testing, update local state even if Firebase fails\n      if (isDevelopment()) {\n        const updatedUser = { ...user, ...data }\n        setUser(updatedUser)\n        await AsyncStorage.setItem(USER_STORAGE_KEY, JSON.stringify(updatedUser))\n      } else {\n        throw error\n      }\n    } finally {\n      setLoading(false)\n    }\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut, updateProfile }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\")\n  }\n  return context\n}"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}